@using WarHub.ArmouryModel.ProjectModel

@inject GitHubWorkspaceService GitHubService
@inject LocalFsService LocalFsService


<h4>
    Source:
    @if (WorkspaceInfo.Type == WorkspaceType.LocalFilesystem)
    {
        <span>@LocalFsService.GetLocalFsWorkspace().Info.GetDirectoryInfo().FullName</span>
    }
    else if (WorkspaceInfo.Type == WorkspaceType.GitHub)
    {
        <img height="32" width="32" src="https://unpkg.com/simple-icons@latest/icons/github.svg" />
        <a href="@WorkspaceInfo.GitHubUrl">@WorkspaceInfo.GitHubRepository</a>
    }
    else
    {
        <span>unknown</span>
    }
    @if (!Editing)
    {
        <button class="btn btn-link btn-sm" @onclick="Edit">edit</button>
    }
</h4>

@if (Editing)
{
    <form class="mb-3" @onsubmit="Submit" @onsubmit:preventDefault>
        <div class="btn-group mb-3">
            <button type="button" class="btn btn-secondary @GetButtonActive(WorkspaceType.LocalFilesystem)" @onclick="() => Select(WorkspaceType.LocalFilesystem)">
                Local filesystem
            </button>
            <button type="button" class="btn btn-secondary @GetButtonActive(WorkspaceType.GitHub)" @onclick="() => Select(WorkspaceType.GitHub)">
                GitHub repository
            </button>
        </div>
        @if (SelectedType == WorkspaceType.LocalFilesystem)
        {
            <p>
                Local filesystem is accessed via <code>DataDir</code> configuration setting. Current location is
                <code>@LocalFsService.GetLocalFsWorkspace().Info.GetDirectoryInfo().FullName</code>
            </p>
        }
        @if (SelectedType == WorkspaceType.GitHub)
        {
            <div class="form-group">
                <label for="github-url">GitHub repository (owner/name)</label>
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text">@GitHubBaseUrl</span>
                    </div>
                    <input type="text" required pattern="[^/\s]+/[^/\s]+" id="github-url" class="form-control" value="@GitHubPath" @onchange="UrlSelected" placeholder="e.g. BSData/wh40k" />
                </div>
                <small class="text-danger mb-3">@ValidationMessage</small>
            </div>
        }
        <div class="mb-3">
            <button type="submit" class="btn btn-success" disabled="@(ValidationMessage != null)">Open</button>
            <button type="button" class="btn btn-outline-secondary" @onclick="() => Editing = false">Cancel</button>
        </div>
    </form>
}


@code {

    private enum Mode
    {
        LocalFs,
        GitHub
    }

    string GitHubBaseUrl = "https://github.com/";

    WorkspaceType SelectedType { get; set; }

    string ValidationMessage;

    Uri GitHubUrl;

    string GitHubPath;

    string GetButtonActive(WorkspaceType type) => SelectedType == type ? "active" : "";

    bool Editing { get; set; }

    [Parameter]
    public WorkspaceInfo WorkspaceInfo { get; set; }

    [Parameter]
    public EventCallback<WorkspaceInfo> WorkspaceInfoChanged { get; set; }

    void Select(WorkspaceType type)
    {
        SelectedType = type;
    }

    async Task SetWorkspace(WorkspaceInfo value)
    {
        WorkspaceInfo = value;
        await WorkspaceInfoChanged.InvokeAsync(value);
    }

    void UrlSelected(ChangeEventArgs e)
    {
        GitHubPath = e.Value.ToString().Trim().Trim('/');
        if (GitHubPath.StartsWith(GitHubBaseUrl))
        {
            GitHubPath = GitHubPath.Substring(GitHubBaseUrl.Length);
            e.Value = GitHubPath;
        }
        var uri = new Uri($"{GitHubBaseUrl}{GitHubPath}");
        if (uri.Segments.Length != 3)
        {
            ValidationMessage = $"Please provide repository address in the format: 'Owner/RepoName'.";
            return;
        }
        ValidationMessage = null;
        GitHubUrl = uri;
    }

    async Task Submit()
    {
        if (ValidationMessage is { })
        {
            return;
        }
        Editing = false;
        var workspace = SelectedType switch
        {
            WorkspaceType.GitHub => WorkspaceInfo.CreateGitHub(GitHubUrl),
            WorkspaceType.LocalFilesystem => WorkspaceInfo.LocalFs,
            _ => throw new ArgumentOutOfRangeException()
        };
        await SetWorkspace(workspace);
    }

    void Edit()
    {
        SelectedType = WorkspaceInfo.Type;
        if (WorkspaceInfo.Type == WorkspaceType.GitHub)
        {
            GitHubUrl = WorkspaceInfo.GitHubUrl;
            GitHubPath = WorkspaceInfo.GitHubRepository;
        }
        ValidationMessage = null;
        Editing = true;
    }
}
