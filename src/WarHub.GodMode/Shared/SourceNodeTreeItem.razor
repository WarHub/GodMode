@using WarHub.ArmouryModel.Source
@using WarHub.GodMode.Pages
@using WarHub.GodMode.Data

<div @onclick="OnClick" class="@(Active ? "active" : "")">
    <span class="oi oi-caret-right @IconCss" style="@(hasChildren && expanded ? "transform: rotate(90deg)" : "")"></span>
    <span class="oi oi-@NodeIcon"></span>
    <span>@GetName()</span>
</div>

@if (hasChildren && expanded)
{

    @foreach (var list in from ci in Node.ChildrenInfos() where ci.IsList && ci.Node.Children().Any() select ci)
    {
        <em>@list.Name</em>
        <ul>
            @foreach (var child in list.Node.Children())
            {
                <li>
                    <SourceNodeTreeItem Node="@child" />
                </li>
            }
        </ul>
    }
}

@code {
    private bool hasChildren = false;
    private bool expanded = false;

    [Parameter]
    public SourceNode Node { get; set; }

    [CascadingParameter]
    public Catalogue Catalogue { get; set; }

    private string IconCss => !hasChildren ? "invisible" : "";

    private string NodeIcon => NodeDisplayService.GetNodeDisplayInfo(Node).Icon;

    private bool Active => Catalogue.ActiveNode == this.Node;

    protected override void OnInitialized()
    {
        hasChildren = Node.Descendants().Any(x => !x.IsList);
    }

    string GetName()
    {
        return NodeDisplayService.GetNodeDisplayInfo(Node).Name;
    }

    void OnClick()
    {
        Catalogue.ActiveNode = this.Node;
        if (!hasChildren)
        {
            return;
        }
        expanded = !expanded;
    }

    void GetListGroups()
    {
        var itemNameGroups = new[]
        {
            new[]
        {
                nameof(SelectionEntryBaseCore.SelectionEntries),
                nameof(SelectionEntryBaseCore.SelectionEntryGroups),
                nameof(SelectionEntryBaseCore.EntryLinks),
            },
            new[]
        {
                nameof(SelectionEntryBaseCore.Profiles),
                nameof(SelectionEntryBaseCore.Rules),
                nameof(SelectionEntryBaseCore.InfoGroups),
                nameof(SelectionEntryBaseCore.InfoLinks),
            },
            new[]
        {
                nameof(EntryBaseCore.Modifiers),
                nameof(EntryBaseCore.ModifierGroups),
            }
        };
        var groups =
            from info in Node.ChildrenInfos()
            where info.IsList
            select info;
    }
}
