@using WarHub.ArmouryModel.Source
@using WarHub.GodMode.Pages
@using WarHub.GodMode.Data

<div>
    <a class="btn btn-light btn-sm @ExpandInvisibleCss" @onclick="ToggleExpand">
        <span class="oi @ExpandButtonIcon"></span>
    </a>
    <span @onclick="SelectNode">
        <span class="oi oi-@NodeIcon"></span>
        <span class="@(Active ? "border border-primary bg-highlight" : "")">@GetName()</span>
    </span>
</div>

@if (hasChildren && expanded)
{
<div class="pl-3">
    @foreach (var @group in GetLists())
    {
        <em>@group.name</em>
        <ul class="list-unstyled">
            @foreach (var child in group.nodes)
            {
                <li>
                    <SourceNodeTreeItem Node="@child" />
                </li>
            }
        </ul>
    }
</div>
}

@code {
    private bool hasChildren = false;
    private bool expanded = false;

    [Parameter]
    public SourceNode Node { get; set; }

    [CascadingParameter]
    public Catalogue Catalogue { get; set; }

    private string ExpandButtonIcon => expanded ? "oi-minus" : "oi-plus";

    private string ExpandInvisibleCss => !hasChildren ? "invisible" : "";

    private string NodeIcon => NodeDisplayService.GetNodeDisplayInfo(Node).Icon;

    private bool Active => Catalogue.ActiveNode == this.Node;

    private static ImmutableHashSet<string> ExcludedListNames { get; } = new[]
    {
        nameof(SelectionEntryNode.Costs),
        nameof(SelectionEntryBaseNode.CategoryLinks),
        nameof(ProfileNode.Characteristics),
        nameof(ProfileTypeNode.CharacteristicTypes),
    }.ToImmutableHashSet();

    protected override void OnParametersSet()
    {
        hasChildren = Node.ChildrenInfos().Any(x => !ExcludedListNames.Contains(x.Name) && x.Node.Descendants().Any(x => !x.IsList));
    }

    string GetName()
    {
        return NodeDisplayService.GetNodeDisplayInfo(Node).Name;
    }

    void ToggleExpand()
    {
        if (!hasChildren)
        {
            return;
        }
        expanded = !expanded;
    }

    void SelectNode()
    {
        Catalogue.ActiveNode = this.Node;
    }

    IEnumerable<(string name, List<SourceNode> nodes)> GetLists()
    {
        var itemNameGroups = new[]
        {
            new[]
        {
                nameof(SelectionEntryBaseCore.SelectionEntries),
                nameof(SelectionEntryBaseCore.SelectionEntryGroups),
                nameof(SelectionEntryBaseCore.EntryLinks),
            },
            new[]
        {
                nameof(SelectionEntryBaseCore.Profiles),
                nameof(SelectionEntryBaseCore.Rules),
                nameof(SelectionEntryBaseCore.InfoGroups),
                nameof(SelectionEntryBaseCore.InfoLinks),
            },
            new[]
        {
                nameof(EntryBaseCore.Modifiers),
                nameof(EntryBaseCore.ModifierGroups),
            }
        };
        var groups =
            from childInfo in Node.ChildrenInfos().Where(x => !ExcludedListNames.Contains(x.Name))
            join association in (
                from g in itemNameGroups
                from name in g
                select new
                {
                    groupName = g[0],
                    listName = name
                }) on childInfo.Name equals association.listName into assocGroup
            from assoc in assocGroup.DefaultIfEmpty(new { groupName = childInfo.Name, listName = childInfo.Name })
            group childInfo by assoc into listGroup
            select (
                name: listGroup.Key.groupName,
                nodes: listGroup.SelectMany(x => x.Node.Children()).ToList()
            );
        return groups.Where(x => x.nodes.Count > 0);
    }

    void GetListGroups()
    {
        var itemNameGroups = new[]
        {
            new[]
        {
                nameof(SelectionEntryBaseCore.SelectionEntries),
                nameof(SelectionEntryBaseCore.SelectionEntryGroups),
                nameof(SelectionEntryBaseCore.EntryLinks),
            },
            new[]
        {
                nameof(SelectionEntryBaseCore.Profiles),
                nameof(SelectionEntryBaseCore.Rules),
                nameof(SelectionEntryBaseCore.InfoGroups),
                nameof(SelectionEntryBaseCore.InfoLinks),
            },
            new[]
        {
                nameof(EntryBaseCore.Modifiers),
                nameof(EntryBaseCore.ModifierGroups),
            }
        };
        var groups =
            from info in Node.ChildrenInfos()
            where info.IsList
            select info;
    }
}
