@using WarHub.ArmouryModel.Source
@using WarHub.GodMode.Pages
@using WarHub.GodMode.Data

<div>
    <a class="btn btn-light @ExpandInvisibleCss" @onclick="ToggleExpand">
        <span class="oi @ExpandButtonIcon"></span>
    </a>
    <span @onclick="SelectNode">
        <span class="oi oi-@NodeIcon"></span>
        <span class="@(Active ? "border border-primary bg-highlight" : "")">@GetName()</span>
    </span>
</div>

@if (hasChildren && expanded)
{

    @foreach (var list in from ci in Node.ChildrenInfos() where ci.IsList && ci.Node.Children().Any() select ci)
    {
        <em>@list.Name</em>
        <ul>
            @foreach (var child in list.Node.Children())
            {
                <li>
                    <SourceNodeTreeItem Node="@child" />
                </li>
            }
        </ul>
    }
}

@code {
    private bool hasChildren = false;
    private bool expanded = false;

    [Parameter]
    public SourceNode Node { get; set; }

    [CascadingParameter]
    public Catalogue Catalogue { get; set; }

    private string ExpandButtonIcon => expanded ? "oi-minus" : "oi-plus";

    private string ExpandInvisibleCss => !hasChildren ? "invisible" : "";

    private string NodeIcon => NodeDisplayService.GetNodeDisplayInfo(Node).Icon;

    private bool Active => Catalogue.ActiveNode == this.Node;

    protected override void OnInitialized()
    {
        hasChildren = Node.Descendants().Any(x => !x.IsList);
    }

    string GetName()
    {
        return NodeDisplayService.GetNodeDisplayInfo(Node).Name;
    }

    void ToggleExpand()
    {
        if (!hasChildren)
        {
            return;
        }
        expanded = !expanded;
    }

    void SelectNode()
    {
        Catalogue.ActiveNode = this.Node;
    }

    void GetListGroups()
    {
        var itemNameGroups = new[]
        {
            new[]
        {
                nameof(SelectionEntryBaseCore.SelectionEntries),
                nameof(SelectionEntryBaseCore.SelectionEntryGroups),
                nameof(SelectionEntryBaseCore.EntryLinks),
            },
            new[]
        {
                nameof(SelectionEntryBaseCore.Profiles),
                nameof(SelectionEntryBaseCore.Rules),
                nameof(SelectionEntryBaseCore.InfoGroups),
                nameof(SelectionEntryBaseCore.InfoLinks),
            },
            new[]
        {
                nameof(EntryBaseCore.Modifiers),
                nameof(EntryBaseCore.ModifierGroups),
            }
        };
        var groups =
            from info in Node.ChildrenInfos()
            where info.IsList
            select info;
    }
}
